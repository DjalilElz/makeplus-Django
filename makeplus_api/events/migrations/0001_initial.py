# Generated by Django 5.2.7 on 2025-10-11 11:35

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', models.CharField(max_length=200)),
                ('location_details', models.TextField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('banner_url', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='upcoming', max_length=20)),
                ('settings', models.JSONField(blank=True, default=dict)),
                ('themes', models.JSONField(blank=True, default=list)),
                ('total_participants', models.IntegerField(default=0)),
                ('total_exhibitors', models.IntegerField(default=0)),
                ('total_rooms', models.IntegerField(default=0)),
                ('organizer_contact', models.EmailField(blank=True, max_length=254)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('capacity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('location', models.CharField(help_text='Location within venue', max_length=200)),
                ('current_participants', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='events.event')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('badge_id', models.CharField(max_length=100, unique=True)),
                ('qr_code_data', models.TextField(help_text='QR code content')),
                ('is_checked_in', models.BooleanField(default=False)),
                ('checked_in_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to=settings.AUTH_USER_MODEL)),
                ('allowed_rooms', models.ManyToManyField(blank=True, related_name='allowed_participants', to='events.room')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('speaker_name', models.CharField(blank=True, max_length=100)),
                ('speaker_title', models.CharField(blank=True, max_length=100)),
                ('speaker_bio', models.TextField(blank=True)),
                ('speaker_photo_url', models.URLField(blank=True)),
                ('theme', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('live', 'Live'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('cover_image_url', models.URLField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='events.event')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='events.room')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='RoomAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accessed_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('granted', 'Granted'), ('denied', 'Denied')], default='granted', max_length=20)),
                ('denial_reason', models.TextField(blank=True)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_accesses', to='events.participant')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accesses', to='events.room')),
                ('verified_by', models.ForeignKey(help_text='Controller who verified', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.session')),
            ],
            options={
                'ordering': ['-accessed_at'],
            },
        ),
        migrations.CreateModel(
            name='UserEventAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('organizer', 'Organizer'), ('controller', 'Controller'), ('participant', 'Participant'), ('exhibitor', 'Exhibitor')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_users', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_assignments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status', '-start_date'], name='events_even_status_489d0f_idx'),
        ),
        migrations.AddIndex(
            model_name='room',
            index=models.Index(fields=['event', 'is_active'], name='events_room_event_i_e3ddbd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='room',
            unique_together={('event', 'name')},
        ),
        migrations.AddIndex(
            model_name='participant',
            index=models.Index(fields=['event', 'is_checked_in'], name='events_part_event_i_218ea6_idx'),
        ),
        migrations.AddIndex(
            model_name='participant',
            index=models.Index(fields=['badge_id'], name='events_part_badge_i_0eeeee_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together={('user', 'event')},
        ),
        migrations.AddIndex(
            model_name='session',
            index=models.Index(fields=['event', 'start_time'], name='events_sess_event_i_3b9525_idx'),
        ),
        migrations.AddIndex(
            model_name='session',
            index=models.Index(fields=['room', 'start_time'], name='events_sess_room_id_c5dbde_idx'),
        ),
        migrations.AddIndex(
            model_name='session',
            index=models.Index(fields=['status'], name='events_sess_status_b87d7b_idx'),
        ),
        migrations.AddIndex(
            model_name='roomaccess',
            index=models.Index(fields=['room', '-accessed_at'], name='events_room_room_id_37b3bf_idx'),
        ),
        migrations.AddIndex(
            model_name='roomaccess',
            index=models.Index(fields=['participant', '-accessed_at'], name='events_room_partici_2ad58c_idx'),
        ),
        migrations.AddIndex(
            model_name='usereventassignment',
            index=models.Index(fields=['event', 'role', 'is_active'], name='events_user_event_i_4f517c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usereventassignment',
            unique_together={('user', 'event')},
        ),
    ]
